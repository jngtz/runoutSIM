[{"path":"https://jngtz.github.io/runoutSIM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Goetz. Author, maintainer. Jia Huang. Contributor.","code":""},{"path":"https://jngtz.github.io/runoutSIM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goetz J (2025). runoutSIM: Spatial Random Walk Simulation Landslide Runout Connectivity R. R package version 1.0, https://github.com/jngtz/runoutSim.","code":"@Manual{,   title = {runoutSIM: Spatial Random Walk Simulation of Landslide Runout and Connectivity in R},   author = {Jason Goetz},   year = {2025},   note = {R package version 1.0},   url = {https://github.com/jngtz/runoutSim}, }"},{"path":"https://jngtz.github.io/runoutSIM/index.html","id":"runoutsim","dir":"","previous_headings":"","what":"Spatial Random Walk Simulation of Landslide Runout and Connectivity in R","title":"Spatial Random Walk Simulation of Landslide Runout and Connectivity in R","text":"runoutSIM R package developed regional-scale runout simulations using random walks. currently can used estimate spatial extent, velocity (via Perla et al’s two-parameter friction model), connectivity : * Debris flows * Snow avalanches Features * Random walk simulation slope-based transition probabilities * Velocity modeling using Perla et al.’s (1980) friction law * Connectivity analysis assess impact downslope features * Allows easy workflow source area prediction models (e.g., GAM, machine learning) * Interactive mapping leaflet htmlwidgets * Optimized parallel processing support large-scale simulations * Integrated runoptGPP grid search parameter optimization","code":""},{"path":"https://jngtz.github.io/runoutSIM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Random Walk Simulation of Landslide Runout and Connectivity in R","text":"can install runoutSIM : ","code":"devtools::install_github(\"jngtz/runoutSIM\") remotes::install_github(\"jngtz/runoutSIM\")"},{"path":"https://jngtz.github.io/runoutSIM/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Spatial Random Walk Simulation of Landslide Runout and Connectivity in R","text":"basic introduction runoutSIM Parallel computing runoutSIM Optimizing runoutSIM parameters runoptGPP","code":""},{"path":"https://jngtz.github.io/runoutSIM/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatial Random Walk Simulation of Landslide Runout and Connectivity in R","text":"use runoutSIM research, please cite: Goetz, J. (2025). runoutSIM: open-source R package simulating mass movement runout connectivity using random walks. GitHub Repository","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Adjacent Cell Coordinates — adjCells","title":"Get Adjacent Cell Coordinates — adjCells","text":"Calculates coordinates 8 adjacent cells surrounding given center cell.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Adjacent Cell Coordinates — adjCells","text":"","code":"adjCells(r, xy)"},{"path":"https://jngtz.github.io/runoutSIM/reference/adjCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Adjacent Cell Coordinates — adjCells","text":"r numeric vector length 2 representing resolution raster x y directions (e.g., c(xres, yres)). xy numeric vector length 2 specifying x y coordinates center cell (e.g., c(x, y)).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Adjacent Cell Coordinates — adjCells","text":"matrix 8 rows 2 columns containing coordinates adjacent cells.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Adjacent Cell Coordinates — adjCells","text":"","code":"adjCells(c(10, 10), c(100, 100))"},{"path":"https://jngtz.github.io/runoutSIM/reference/adjRowCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Row/Column Indices of Adjacent Cells — adjRowCol","title":"Get Row/Column Indices of Adjacent Cells — adjRowCol","text":"Computes row column indices 8 adjacent cells surrounding given central cell raster grid.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjRowCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Row/Column Indices of Adjacent Cells — adjRowCol","text":"","code":"adjRowCol(rowcol)"},{"path":"https://jngtz.github.io/runoutSIM/reference/adjRowCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Row/Column Indices of Adjacent Cells — adjRowCol","text":"rowcol numeric vector length 2 representing row column index center cell.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjRowCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Row/Column Indices of Adjacent Cells — adjRowCol","text":"matrix 8 rows 2 columns row column indices adjacent cells.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/adjRowCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Row/Column Indices of Adjacent Cells — adjRowCol","text":"","code":"adjRowCol(c(10, 10)) #>      [,1] [,2] #> [1,]    9    9 #> [2,]   10    9 #> [3,]   11    9 #> [4,]    9   11 #> [5,]   10   11 #> [6,]   11   11 #> [7,]    9   10 #> [8,]   11   10"},{"path":"https://jngtz.github.io/runoutSIM/reference/cdfProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Raster Values to Cumulative Distribution — cdfProb","title":"Convert Raster Values to Cumulative Distribution — cdfProb","text":"Applies empirical cumulative distribution function (ECDF) raster values, returning raster cell reflects percentile rank.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/cdfProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Raster Values to Cumulative Distribution — cdfProb","text":"","code":"cdfProb(x)"},{"path":"https://jngtz.github.io/runoutSIM/reference/cdfProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Raster Values to Cumulative Distribution — cdfProb","text":"x vector","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/cdfProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Raster Values to Cumulative Distribution — cdfProb","text":"vector empirical probabilities","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/cdfProb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Raster Values to Cumulative Distribution — cdfProb","text":"","code":"if (FALSE) { # \\dontrun{ test <- cdfProb(c(1,2,3,4,5)) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/connToRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Connectivity Probabilities to Raster — connToRaster","title":"Convert Connectivity Probabilities to Raster — connToRaster","text":"Creates raster source cell assigned probability connecting downstream feature.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/connToRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Connectivity Probabilities to Raster — connToRaster","text":"","code":"connToRaster(x, dem)"},{"path":"https://jngtz.github.io/runoutSIM/reference/connToRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Connectivity Probabilities to Raster — connToRaster","text":"x list outputs multiple runout simulations, containing start_cell prob_connect. dem SpatRaster (typically DEM used simulation) used define output raster grid.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/connToRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Connectivity Probabilities to Raster — connToRaster","text":"SpatRaster probability connectivity assigned source cell.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/connToRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Connectivity Probabilities to Raster — connToRaster","text":"","code":"if (FALSE) { # \\dontrun{ # Convert connectivity results to a raster conn_prob <- connToRaster(sim_paths, dem) plot(conn_prob) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"Identifies masks top bottom quantile elevation values within given polygon overlaying digital elevation model (DEM).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"","code":"elevQuantile(dem, runout_ply, quant = 0.05, upper = TRUE)"},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"dem SpatRaster object representing digital elevation model (DEM). runout_ply SpatVector polygon (compatible SpatialPolygons* object) defining area extract elevation values. quant numeric value 0 1 indicating proportion (quantile) elevation values extract. Defaults 0.05 (top/bottom 5%). upper Logical. TRUE, function selects highest elevation percentile; FALSE, selects lowest. Defaults TRUE.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"SpatRaster object selected cells marked 1 others set NA.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"function useful identifying areas extreme elevation within polygon, potential landslide release zones (upper) deposition zones (lower), based percentile thresholds.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/elevQuantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract DEM elevations for a given quantile within a polygon — elevQuantile","text":"","code":"if (FALSE) { # \\dontrun{ library(terra) dem <- rast(\"dem.tif\") runout_ply <- vect(\"runout_area.shp\") release_zone <- elevQuantile(dem, runout_ply, quant = 0.05, upper = TRUE) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/euclideanDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Euclidean Distance Between Two Points — euclideanDistance","title":"Calculate Euclidean Distance Between Two Points — euclideanDistance","text":"Computes Euclidean distance two 2D points.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/euclideanDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Euclidean Distance Between Two Points — euclideanDistance","text":"","code":"euclideanDistance(p1, p2)"},{"path":"https://jngtz.github.io/runoutSIM/reference/euclideanDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Euclidean Distance Between Two Points — euclideanDistance","text":"p1 numeric vector length 2 representing first point's coordinates (x, y). p2 numeric vector length 2 representing second point's coordinates (x, y).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/euclideanDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Euclidean Distance Between Two Points — euclideanDistance","text":"numeric value representing distance two points.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/euclideanDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Euclidean Distance Between Two Points — euclideanDistance","text":"","code":"euclideanDistance(c(0, 0), c(3, 4)) #> [1] 5"},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Spatial Data Using Leaflet — leafmap","title":"Plot Spatial Data Using Leaflet — leafmap","text":"Creates interactive leaflet map raster sf vector data, options customize basemaps, styling, popups.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Spatial Data Using Leaflet — leafmap","text":"","code":"leafmap(   m = NULL,   data = NULL,   group_layers = NULL,   label = NULL,   opacity = 0.5,   color = \"black\",   fill_color = color,   radius = 3,   weight = 2,   palette = \"viridis\",   basemaps = c(\"Esri.WorldImagery\", \"Esri.WorldTopoMap\"),   add_legend = TRUE,   add_image_query = TRUE )"},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Spatial Data Using Leaflet — leafmap","text":"m Optional existing leaflet map object. NULL, new map initialized. data Raster*, terra::SpatRaster, sf object plotted. provided, m interpreted data. group_layers Character vector existing overlay groups. Used maintain group-layer visibility toggles. label character string layer label legend title. NULL, auto-generated object name. opacity Numeric (0–1) layer transparency. Defaults 0.5. color Color used vector geometries (ignored rasters). Defaults \"black\". fill_color Color used fill vector geometries (ignored rasters). Defaults color parameter. radius Numeric size circle markers point geometries. Defaults 3. weight Line border thickness vector geometries. Defaults 2. palette Color palette name used leaflet::colorNumeric() raster coloring. Defaults \"viridis\". categorical values, supply list - e.g.  list(classes = 1, colors = \"#99d2ff\", labels = \"Water\")) basemaps Character vector tile provider names (leaflet::providers) include base layers. Defaults c(\"Esri.WorldImagery\", \"Esri.WorldTopoMap\"). add_legend Logical produce legend . Defaults TRUE. Also controls raster value query appears. add_image_query Logical add mouse hover query raster values. Defaults TRUE.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Spatial Data Using Leaflet — leafmap","text":"leaflet map object data layer(s) controls.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Spatial Data Using Leaflet — leafmap","text":"function designed handle standalone piped usage. first argument raster sf object data NULL, automatically reassigns input appropriately. can visualize raster values color palettes legends, render vector data (points, lines, polygons) informative popups. Raster data projected WGS84 (EPSG:4326) colorized using continuous palette. Vector data supports POINT, LINESTRING, POLYGON geometries. Attributes displayed scrollable popups many fields. function adds scale bars, measurement tools, layer controls. add_image_query can make file size leaflet html widget large e.g. 20x's larger. recommended = FALSE exporting Web Page html widget.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/leafmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Spatial Data Using Leaflet — leafmap","text":"","code":"if (FALSE) { # \\dontrun{ library(leaflet) library(sf) library(raster) # From scratch leafmap(data = st_read(system.file(\"shape/nc.shp\", package = \"sf\")))  # Add to existing map m <- leaflet() leafmap(m, st_read(system.file(\"shape/nc.shp\", package = \"sf\"))) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/makeConnFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Connectivity Feature Mask — makeConnFeature","title":"Create Connectivity Feature Mask — makeConnFeature","text":"Converts spatial feature (e.g., polygon sf object) binary matrix mask aligned reference DEM used runout simulations.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/makeConnFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Connectivity Feature Mask — makeConnFeature","text":"","code":"makeConnFeature(x, y)"},{"path":"https://jngtz.github.io/runoutSIM/reference/makeConnFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Connectivity Feature Mask — makeConnFeature","text":"x sf object representing feature interest (e.g., polygon). y SpatRaster (e.g., DEM) used reference rasterization.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/makeConnFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Connectivity Feature Mask — makeConnFeature","text":"binary matrix size y, 1 indicating presence feature 0 elsewhere.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/makeConnFeature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Connectivity Feature Mask — makeConnFeature","text":"","code":"if (FALSE) { # \\dontrun{ feature_mask <- makeConnFeature(my_sf_polygon, my_dem) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/makeSourceList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of xy coordinates from terra::xyFromCell coordinates — makeSourceList","title":"Create a list of xy coordinates from terra::xyFromCell coordinates — makeSourceList","text":"Create list xy coordinates terra::xyFromCell coordinates","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/makeSourceList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of xy coordinates from terra::xyFromCell coordinates — makeSourceList","text":"","code":"makeSourceList(source_xy)"},{"path":"https://jngtz.github.io/runoutSIM/reference/makeSourceList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of xy coordinates from terra::xyFromCell coordinates — makeSourceList","text":"source_xy sf object POINT geometry matrix coordinate pairs (see terra::xyFromCell)","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/makeSourceList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of xy coordinates from terra::xyFromCell coordinates — makeSourceList","text":"","code":"if (FALSE) { # \\dontrun{ source_areas<- rast(\"Dev/Data/classified_w7filter_source_areas.tif\") source_areas <- crop(source_areas, dem) sum(values(source_areas), na.rm = TRUE)  # Find cells where the value is 1 source_cells <- which(values(source_areas) == 1)  source_xy <- xyFromCell(source_areas, source_cells)  source_l <- makeSourceList(source_xy) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":null,"dir":"Reference","previous_headings":"","what":"PCM Friction Model — pcm","title":"PCM Friction Model — pcm","text":"Implements PCM friction model runout simulation.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCM Friction Model — pcm","text":"","code":"pcm(mu = 0.1, md = 40, v_p = 1, theta_p = 30, theta_i = 20, l = 12.5)"},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCM Friction Model — pcm","text":"mu Numeric. Sliding friction coefficient (default: 0.1). md Numeric. Mass--drag ratio (default: 40). v_p Numeric. Initial velocity (m/s) (default: 1). theta_p Numeric. Slope angle previous grid cell (degrees) (default: 30). theta_i Numeric. Slope angle current grid cell (degrees) (default: 20). l Numeric. Distance grid cells (m) (default: 12.5).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCM Friction Model — pcm","text":"Numeric. Computed velocity local grid cell. Returns NaN velocity physically possible (e.g., stopping condition).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCM Friction Model — pcm","text":"PCM model calculates velocity propagation across terrain grid based friction, slope, mass--drag ratio. includes velocity correction concave slope transitions per Wichmann (2017).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PCM Friction Model — pcm","text":"Wichmann, V.: Gravitational Process Path (GPP) model (v1.0) – GIS-based simulation framework gravitational processes, Geosci. Model Dev., 10, 3309–3327, https://doi.org/10.5194/gmd-10-3309-2017, 2017. Perla, R., Cheng, T. T., McClung, D. M.: Two–Parameter Model Snow–Avalanche Motion, J. Glaciol., 26, 197–207, https://doi.org/10.3189/S002214300001073X, 1980.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/pcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCM Friction Model — pcm","text":"","code":"pcm(mu = 0.1, md = 40, v_p = 2, theta_p = 35, theta_i = 25, l = 12.5) #> [1] 7.913925"},{"path":"https://jngtz.github.io/runoutSIM/reference/rasterCdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Raster Values to Cumulative Distribution — rasterCdf","title":"Convert Raster Values to Cumulative Distribution — rasterCdf","text":"Applies empirical cumulative distribution function (ECDF) raster values, returning raster cell reflects percentile rank.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/rasterCdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Raster Values to Cumulative Distribution — rasterCdf","text":"","code":"rasterCdf(x)"},{"path":"https://jngtz.github.io/runoutSIM/reference/rasterCdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Raster Values to Cumulative Distribution — rasterCdf","text":"x SpatRaster object (e.g., walksToRaster velocityToRaster).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/rasterCdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Raster Values to Cumulative Distribution — rasterCdf","text":"SpatRaster extent resolution values 0 1.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/rasterCdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Raster Values to Cumulative Distribution — rasterCdf","text":"","code":"if (FALSE) { # \\dontrun{ percentile_raster <- rasterCdf(runout_raster) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"Simulates runout paths mass movements (e.g., debris flows, snow avalanches) one source points using physically-informed random walk model. path incorporates slope-based directionality, lateral dispersion, energy loss based Perla-Cheng-McClung (PCM) velocity model.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"","code":"runoutSim(   dem,   xy,   mu = 0.1,   md = 40,   int_vel = 1,   slp_thresh = 30,   exp_div = 3,   per_fct = 2,   walks = 100,   source_connect = FALSE,   connect_feature = NULL )"},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"dem SpatRaster. digital elevation model (DEM), ideally sink-filled hydrologically correct. xy Numeric vector matrix. Coordinates one source points (e.g., cbind(x, y)). mu Numeric. Basal friction coefficient used PCM velocity model (default = 0.1). md Numeric. Mass--drag ratio used PCM model control deceleration air drag terrain resistance. int_vel Numeric. Initial velocity PCM model. slp_thresh Numeric. Minimum slope (degrees) required particle movement. Particles stop local slope falls value. exp_div Numeric. Lateral dispersion exponent controlling spread paths away steepest descent. Higher values = less lateral dispersion. per_fct Numeric. Persistence factor controlling strongly particles follow current downslope direction. Values >1 increase directional inertia. walks Integer. Number random walk particles simulate per source point (default = 1000). source_connect Logical. TRUE, particles flagged based whether intersect defined connectivity feature (e.g., stream channel). connect_feature SpatRaster. Optional raster connectivity features created using makeConnFeature(). Required source_connect = TRUE.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"list simulated particle paths. element contains matrix list stepwise information (e.g., coordinates, step index, velocity, slope, connectivity).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"function simulates gravity-driven runout user-defined source cells. Particle paths evolve random walk process biased terrain slope lateral spread rules. step, PCM velocity model updates particle speed based slope, friction (mu), mass--drag ratio (md). Paths terminate slope falls slp_thresh, particles encounter terrain conditions longer allow continued downhill movement.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"pcm-model","dir":"Reference","previous_headings":"","what":"PCM Model","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"PCM model (Perla-Cheng-McClung) describes velocity balance gravitational acceleration, frictional resistance, air drag. Higher md values imply greater momentum less deceleration drag.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"applicability","dir":"Reference","previous_headings":"","what":"Applicability","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"model can applied variety gravity-driven mass movements debris flows, snow avalanches, similar phenomena. random walk approach, combined PCM velocity model, makes highly versatile simulating different types runout based underlying physical principles mass movement.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/runoutSim.html","id":"connectivity","dir":"Reference","previous_headings":"","what":"Connectivity","title":"Simulate Runout Paths Using Random Walk and PCM Physics — runoutSim","text":"source_connect = TRUE, simulated paths checked intersection connectivity feature raster. enables downstream analysis connectivity probability (connToRaster()), flow velocity surfaces (velocityToRaster()).","code":""},{"path":[]},{"path":[]},{"path":"https://jngtz.github.io/runoutSIM/reference/sourceConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Probability of Source-Feature Connectivity — sourceConnect","title":"Estimate Probability of Source-Feature Connectivity — sourceConnect","text":"Calculates proportion simulated paths (e.g., random walk runout simulations) intersect binary connectivity feature mask.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/sourceConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Probability of Source-Feature Connectivity — sourceConnect","text":"","code":"sourceConnect(sim_paths, feature_mask, trials = NULL)"},{"path":"https://jngtz.github.io/runoutSIM/reference/sourceConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Probability of Source-Feature Connectivity — sourceConnect","text":"sim_paths list matrices, containing (row, col) indices cells visited simulation path. feature_mask binary matrix indicating presence (1) connectivity feature (makeConnFeature()). trials Optional integer specifying many simulation paths consider. Defaults paths.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/sourceConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Probability of Source-Feature Connectivity — sourceConnect","text":"numeric value 0 1 indicating estimated probability connection.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/sourceConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Probability of Source-Feature Connectivity — sourceConnect","text":"","code":"if (FALSE) { # \\dontrun{ p_connect <- sourceConnect(sim_paths, feature_mask, trials = 1000) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/velocityToRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Runout Velocities to Raster — velocityToRaster","title":"Convert Runout Velocities to Raster — velocityToRaster","text":"Aggregates maximum velocities runout simulation paths raster, using specified summary method multiple simulations overlap.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/velocityToRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Runout Velocities to Raster — velocityToRaster","text":"","code":"velocityToRaster(x, dem, method = \"max\")"},{"path":"https://jngtz.github.io/runoutSIM/reference/velocityToRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Runout Velocities to Raster — velocityToRaster","text":"x list simulation outputs containing cell_max_vel cell_trav_freq. dem SpatRaster (DEM) used reference. method Summary function apply across overlapping simulations (e.g., \"max\", \"mean\").","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/velocityToRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Runout Velocities to Raster — velocityToRaster","text":"SpatRaster cell values representing maximum velocity (m/s).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/velocityToRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Runout Velocities to Raster — velocityToRaster","text":"","code":"if (FALSE) { # \\dontrun{ # Convert velocity results to a raster trav_vel <- velocityToRaster(sim_paths, dem) plot(trav_vel) } # }"},{"path":"https://jngtz.github.io/runoutSIM/reference/walksToRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Random Walk Results to Raster — walksToRaster","title":"Convert Random Walk Results to Raster — walksToRaster","text":"Aggregates output runoutSim() raster showing often cell traversed runout simulations. Optionally weights walk supplied vector (e.g., probability initiation).","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/walksToRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Random Walk Results to Raster — walksToRaster","text":"","code":"walksToRaster(x, dem, method = \"freq\", weights = NULL)"},{"path":"https://jngtz.github.io/runoutSIM/reference/walksToRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Random Walk Results to Raster — walksToRaster","text":"x list runout simulation outputs (e.g., runoutSim()). dem SpatRaster object representing reference DEM. method Method combining overlaying runout paths: \"freq\" \"cdf_prob\" calculate traverse frequency cumulative distribution function probabilities simulations single source cell. \"max_cdf_prob\" \"avg_cdf_prob\" calculate maximum/average empirical probabilites CDF's applied walks invididual source cells. weights Optional numeric vector weights (length x) scale traverse frequencies.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/walksToRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Random Walk Results to Raster — walksToRaster","text":"SpatRaster cell values representing weighted unweighted traverse frequencies.","code":""},{"path":"https://jngtz.github.io/runoutSIM/reference/walksToRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Random Walk Results to Raster — walksToRaster","text":"","code":"if (FALSE) { # \\dontrun{ # Convert simulated paths to a raster of transition frequencies paths_raster <- walksToRaster(sim_paths, dem) plot(paths_raster) } # }"}]
